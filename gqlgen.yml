# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - schema/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Where should any generated dao go?
model:
  filename: internal/models/models_generated.go
  package: models

# Where should the resolver implementations go?
# resolver:
#   layout: follow-schema
#   dir: cmd/app/resolvers
#   package: resolvers
#   filename_template: "{name}.resolvers.go"

# gqlgen will search for any type names (model) in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/adisnuhic/go-graphql/internal/models"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.Uint64 # use uint64 in models for Primary Keys
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Uint64:
    model:
      - github.com/adisnuhic/go-graphql/internal/scalars.Uint64
  Timestamp:
    model:
      - github.com/adisnuhic/go-graphql/internal/scalars.Timestamp
  User:
    model:
      - github.com/adisnuhic/go-graphql/internal/models.User
    fields:
      posts:
        resolver: true
  Post:
    model: github.com/adisnuhic/go-graphql/internal/models.Post
    fields:
      user:
        resolver: true
